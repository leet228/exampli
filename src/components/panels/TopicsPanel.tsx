import { useEffect, useMemo, useState } from 'react';
import { supabase } from '../../lib/supabase';

type Subject = { id: number; code: string; title: string; level: string };

type Props = {
  // –†–µ–∂–∏–º –ø–∞–Ω–µ–ª–∏ (–∫–∞–∫ —É —Ç–µ–±—è –≤ Home.tsx)
  open?: boolean;
  onClose?: () => void;

  // –†–µ–∂–∏–º ¬´–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —à—Ç–æ—Ä–∫–∏¬ª (–∫–∞–∫ –≤ HUD.tsx)
  onPicked?: (s: Subject) => void;
  onAddClick?: () => void;
};

export default function TopicsPanel(props: Props) {
  const { open, onClose, onPicked, onAddClick } = props;

  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [activeCode, setActiveCode] = useState<string | null>(null);

  useEffect(() => {
    // –≥—Ä—É–∑–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞:
    //  - –ª–∏–±–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø–∞–Ω–µ–ª–∏ –∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞,
    //  - –ª–∏–±–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (open –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤–æ–æ–±—â–µ).
    if (open === false) return;

    (async () => {
      const tgId = (window as any)?.Telegram?.WebApp?.initDataUnsafe?.user?.id;
      if (!tgId) return;

      const { data: user } = await supabase
        .from('users')
        .select('id')
        .eq('tg_id', String(tgId))
        .single();

      if (!user?.id) { setSubjects([]); return; }

      // 1) –±–µ—Ä—ë–º subject_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: rel } = await supabase
        .from('user_subjects')
        .select('subject_id')
        .eq('user_id', user.id);

      const ids = (rel || []).map(r => r.subject_id as number);
      if (!ids.length) { setSubjects([]); return; }

      // 2) –ø–æ–¥—Ç—è–Ω–µ–º —Å–∞–º–∏ subjects
      const { data } = await supabase
        .from('subjects')
        .select('id, code, title, level')
        .in('id', ids)
        .order('title');

      setSubjects((data as Subject[]) || []);
      setActiveCode(((data as Subject[] | null)?.[0]?.code) || null);
    })();
  }, [open]);

  // –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî ¬´—Å–µ—Ç–æ—á–∫–∞¬ª –∫—É—Ä—Å–æ–≤ + ¬´+¬ª
  const Grid = useMemo(() => (
    <div className="grid grid-cols-3 gap-3">
      {subjects.map((s) => {
        const active = s.code === activeCode;
        return (
          <button
            key={s.id}
            type="button"
            onClick={() => {
              setActiveCode(s.code);
              onPicked?.(s);
            }}
            className={`aspect-square rounded-2xl border flex flex-col items-center justify-center text-center px-2 transition
              ${active ? 'border-[var(--accent)] bg-[color:var(--accent)]/10' : 'border-white/10 bg-white/5 hover:bg-white/10'}
            `}
          >
            <div className="text-2xl mb-1">üìò</div>
            <div className="text-xs font-semibold leading-tight line-clamp-2">{s.title}</div>
            <div className="text-[10px] text-muted mt-0.5">{s.level}</div>
          </button>
        );
      })}

      {/* –ü–ª–∏—Ç–∫–∞ ¬´+ –î–æ–±–∞–≤–∏—Ç—å¬ª */}
      <button
        type="button"
        onClick={() => onAddClick?.()}
        className="aspect-square rounded-2xl border border-dashed border-white/15 bg-white/5 hover:bg-white/10 flex items-center justify-center"
      >
        <div className="flex flex-col items-center">
          <div className="text-2xl">Ôºã</div>
          <div className="text-[10px] text-muted mt-1">–î–æ–±–∞–≤–∏—Ç—å</div>
        </div>
      </button>
    </div>
  ), [subjects, activeCode, onPicked, onAddClick]);

  // –ï—Å–ª–∏ –ø—Ä–æ–ø—Å—ã open/onClose –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º –ü–ê–ù–ï–õ–¨ (–∫–∞–∫ –≤ Home.tsx).
  if (typeof open === 'boolean') {
    if (!open) return null;
    return (
      <>
        <div className="side-backdrop" onClick={onClose} />
        <aside className="side-panel">
          <div className="side-panel-header flex items-center justify-center">
            <div className="text-lg font-semibold">–¢–µ–º—ã</div>
          </div>
          <div className="side-panel-body">
            {Grid}
          </div>
        </aside>
      </>
    );
  }

  // –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–∫–∞–∫ –≤ HUD TopSheet)
  return <div className="pb-1">{Grid}</div>;
}
