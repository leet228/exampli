import { useCallback, useEffect, useMemo, useState } from 'react';
import { supabase } from '../lib/supabase';
import SkillRoad from '../components/SkillRoad';
import TopicsButton from '../components/TopicsButton';
import TopicsPanel from '../components/panels/TopicsPanel';
import FloatingDecor from '../components/FloatingDecor';

type RoadItem = { id: string; title: string; subtitle?: string };

export default function Home() {
  const [tgUser, setTgUser] = useState<any>(null);
  const [items, setItems] = useState<RoadItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [openTopics, setOpenTopics] = useState(false);
  const [courseTitle, setCourseTitle] = useState<string | undefined>(undefined);

  // –∫–∞–∫–æ–π –¥–µ–∫–æ—Ä –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞ ¬´–¥–æ—Ä–æ–≥–æ–π¬ª
  const decorTheme = useMemo<'math' | 'russian' | 'default'>(() => {
    const t = (courseTitle || '').toLowerCase();
    if (t.includes('–º–∞—Ç–µ–º–∞—Ç')) return 'math';
    if (t.includes('—Ä—É—Å—Å–∫')) return 'russian';
    return 'default';
  }, [courseTitle]);

  const fetchLessons = useCallback(async () => {
    try {
      setLoading(true);
      const id = (window as any)?.Telegram?.WebApp?.initDataUnsafe?.user?.id;
      if (!id) { setItems([]); setLoading(false); return; }

      const { data: user } = await supabase
        .from('users')
        .select('id')
        .eq('tg_id', String(id))
        .single();

      if (!user) { setItems([]); setLoading(false); return; }

      // –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: subs } = await supabase
        .from('user_subjects')
        .select('subject_id')
        .eq('user_id', user.id);

      const subjectIds = (subs || []).map((r: any) => r.subject_id);
      if (subjectIds.length === 0) { setItems([]); setLoading(false); return; }

      // –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 12 —É—Ä–æ–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
      const { data } = await supabase
        .from('lessons')
        .select('id, title, subject:subject_id(title, level)')
        .in('subject_id', subjectIds)
        .order('order_index', { ascending: true })
        .limit(12);

      const mapped: RoadItem[] = (data || []).map((l: any) => ({
        id: String(l.id),
        title: l.title,
        subtitle: l.subject?.title,
      }));

      setItems(mapped);

      // –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–æ–∑—å–º—ë–º –ø–æ–¥–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
      if (!courseTitle && Array.isArray(data) && data.length > 0) {
        const firstTitle = (data[0] as any)?.subject?.title as string | undefined;
        if (firstTitle) setCourseTitle(firstTitle);
      }
    } finally {
      setLoading(false);
    }
  }, [courseTitle]);

  // –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    const tg = (window as any)?.Telegram?.WebApp;
    setTgUser(tg?.initDataUnsafe?.user || null);
    fetchLessons();

    // –ø—Ä–∏ —Å–º–µ–Ω–µ –∫—É—Ä—Å–∞ –≥–¥–µ-–ª–∏–±–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    const onChanged = (evt: Event) => {
      const e = evt as CustomEvent<{ title?: string }>;
      if (e.detail?.title) setCourseTitle(e.detail.title);
      fetchLessons();
    };
    window.addEventListener('exampli:courseChanged', onChanged);

    // –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –æ—Å–≤–µ–∂–∏–º
    const onVisible = () => { if (!document.hidden) fetchLessons(); };
    document.addEventListener('visibilitychange', onVisible);

    return () => {
      window.removeEventListener('exampli:courseChanged', onChanged);
      document.removeEventListener('visibilitychange', onVisible);
    };
  }, [fetchLessons]);

  const name = useMemo(() => tgUser?.first_name || tgUser?.username || '–¥—Ä—É–≥', [tgUser]); // —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –±—É–¥—É—â–µ–µ

  return (
    <div className="overflow-x-hidden">
      {/* –ª—ë–≥–∫–∏–π ¬´–ø–ª–∞–≤–∞—é—â–∏–π¬ª —Ñ–æ–Ω –ø–æ–¥ –¥–æ—Ä–æ–≥—É: —Ü–∏—Ñ—Ä—ã/–±—É–∫–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–∞ */}
      <FloatingDecor theme={decorTheme} />

      {/* –ø–ª–∞–≤–∞—é—â–∞—è –±–æ–ª—å—à–∞—è —Ä–æ–∑–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ç–µ–º (–ø—Ä–∏–∫–ª–µ–µ–Ω–∞ –ø–æ–¥ HUD) */}
      <TopicsButton onOpen={() => setOpenTopics(true)} />
      <TopicsPanel open={openTopics} onClose={() => setOpenTopics(false)} />

      {/* –æ—Ç—Å—Ç—É–ø, —á—Ç–æ–±—ã –¥–æ—Ä–æ–≥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∞ –ø–æ–¥ —Ä–æ–∑–æ–≤—É—é –∫–Ω–æ–ø–∫—É */}
      <div style={{ height: 64 }} />

      {loading ? (
        <div className="card">–ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏‚Ä¶</div>
      ) : items.length === 0 ? (
        <div className="card">–¢–µ–º—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ù–∞–∂–º–∏ ¬´üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É¬ª —Å–≤–µ—Ä—Ö—É.</div>
      ) : (
        <SkillRoad items={items} />
      )}
    </div>
  );
}
